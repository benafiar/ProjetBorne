
{% set _entity_config = easyadmin_entity(app.request.query.get("entity")) %}
{% trans_default_domain _entity_config.translation_domain %}
{% set _trans_parameters = { '%entity_name%': _entity_config.name|trans, '%entity_label%': _entity_config.label|trans } %}

{% extends _entity_config.templates.layout %}

{% set _request_parameters = app.request.query.all|merge(_request_parameters|default({}))|merge({
    action: app.request.get('action'),
    entity: _entity_config.name,
    menuIndex: app.request.get('menuIndex'),
    submenuIndex: app.request.get('submenuIndex'),
    sortField: app.request.get('sortField'),
    sortDirection: app.request.get('sortDirection'),
    page: app.request.get('page', 1),
    filters: app.request.get('filters', []),
    referer: null
}) %}

{% if 'search' == app.request.get('action') %}
    {% set _request_parameters = _request_parameters|merge({
        query: app.request.get('query')|default(''),
    }) %}
{% endif %}

{% set _request_parameters = _request_parameters|merge({ referer: path('easyadmin', _request_parameters)|url_encode }) %}
{% set _has_batch_actions = batch_form is defined and batch_form.vars.batch_actions|length > 0 %}
{% set _has_filters = _entity_config.list.filters|default(false) %}

{% block body_id 'easyadmin-list-' ~ _entity_config.name %}
{% block body_class 'list list-' ~ _entity_config.name|lower %}

{% block content_title %}
    {% apply spaceless %}
        {% if 'search' == app.request.get('action') %}
            {% set _default_title = 'search.page_title'|transchoice(paginator.nbResults, {}, 'EasyAdminBundle') %}
            {{ (_entity_config.search.title is defined ? _entity_config.search.title|transchoice(paginator.nbResults) : _default_title)|raw }}
        {% else %}
            {% set _default_title = 'list.page_title'|trans(_trans_parameters, 'EasyAdminBundle') %}
            {{ (_entity_config.list.title is defined ? _entity_config.list.title|trans(_trans_parameters) : _default_title)|raw }}
        {% endif %}
    {% endapply %}
{% endblock %}
{# TODO #}
{% if easyadmin_action_is_enabled_for_list_view('search', _entity_config.name) %}
    {% set _action = easyadmin_get_action_for_list_view('search', _entity_config.name) %}
    
{% endif %}
{% block global_actions %}

    {% if _has_filters %}
        {% set _applied_filters = app.request.attributes.get('easyadmin').filters.applied|default(false) %}
        {% block filters_action %}
            <div class="btn-group action-filters float-right ml-1">
                <a href="{{ path('easyadmin', _request_parameters|merge({ action: 'filters', referer_action: app.request.get('action') })) }}"
                   class="btn btn-secondary btn-rounded btn-labeled btn-labeled-right action-filters-button {{ _applied_filters ? 'action-filters-applied' }}" data-modal="#modal-filters">
                    <i class="fa fa-filter fa-fw"></i> {{ 'filter.title'|trans(_trans_parameters, 'EasyAdminBundle') }}{% if _applied_filters %} <span class="text-warning">({{ _applied_filters|length }})</span>{% endif %}
                </a>
                {% if _applied_filters %}
                    <a href="{{ path('easyadmin', _request_parameters|merge({ filters: null })) }}" class="btn btn-secondary action-filters-reset">
                        <i class="fa fa-times"></i>
                    </a>
                {% endif %}
            </div>
        {% endblock filters_action %}
    {% endif %}

    {% if easyadmin_action_is_enabled_for_list_view('new', _entity_config.name) %}
        {% set _action = easyadmin_get_action_for_list_view('new', _entity_config.name) %}
        {% block new_action %}
            <div class="button-action float-right ml-1">
                <a class="btn-rounded {{ _action.css_class|default('') }}" href="{{ path('easyadmin', _request_parameters|merge({ action: _action.name })) }}" target="{{ _action.target }}">
                    {% if _action.icon %}<i class="fa fa-fw fa-{{ _action.icon }}"></i>{% endif %}
                    {{ _action.label is defined and not _action.label is empty ? _action.label|trans(_trans_parameters) }}
                </a>
            </div>
        {% endblock new_action %}
    {% endif %}
{% endblock global_actions %}

{% block batch_actions %}
    {% if _has_batch_actions %}
        <div class="batch-actions" style="display: none">
            {% form_theme batch_form with easyadmin_config('design.form_theme') only %}
            {{ form(batch_form) }}

            {{ include('@EasyAdmin/default/includes/_batch_action_modal.html.twig', {
                _translation_domain: _entity_config.translation_domain,
                _trans_parameters: _trans_parameters,
                _entity_config: _entity_config,
            }, with_context = false) }}
        </div>
    {% endif %}
{% endblock batch_actions %}

{% block content_header %}
    {{ parent() }}
    {{ block('batch_actions') }}
    {% if _has_filters %}
        {{ include('@EasyAdmin/default/includes/_filters_modal.html.twig') }}
    {% endif %}
{% endblock content_header %}
{% set _list_item_actions = easyadmin_get_actions_for_list_item(_entity_config.name) %}
{% block main %}
    {% set _fields_visible_by_user = fields|filter((metadata, field) => easyadmin_is_granted(metadata.permission)) %}
    {% set _number_of_hidden_results = 0 %}


    <table
        id="table"
        data-search="true"
        data-show-columns="true"
        data-click-to-select="true"
        data-minimum-count-columns="2"
        data-show-pagination-switch="true"
        data-pagination="true"
        data-id-field="id"
        data-page-list="[10, 25, 50, 100, all]"
        data-show-footer="true"
        data-side-pagination="server"
        data-url="{{ path('easyadmin', {action: 'records', entity: _entity_config.name}) }}">
    </table>

    {% block delete_form %}
        {% set referer = paginator.currentPage == paginator.nbPages and 1 != paginator.currentPage and 1 == paginator.currentPageResults|length
            ? path('easyadmin', app.request.query|merge({ page: app.request.query.get('page') - 1 }))
            : app.request.requestUri
        %}

        {{ include('@EasyAdmin/default/includes/_delete_form.html.twig', {
            view: 'list',
            referer: referer,
            delete_form: delete_form_template,
            _translation_domain: _entity_config.translation_domain,
            _trans_parameters: _trans_parameters,
            _entity_config: _entity_config,
        }, with_context = false) }}
    {% endblock delete_form %}
{% endblock main %}

{% block content_footer %}
{#    {% block paginator %}#}
{#        {{ include(_entity_config.templates.paginator) }}#}
{#    {% endblock paginator %}#}
{% endblock %}


{% block head_stylesheets %}
    <link rel="stylesheet" href="{{ asset('/assets/bootstrap-datatable/bootstrap-table.css') }}">
{% endblock %}

{% block body_javascript %}
    {{ parent() }}

    <script type="text/javascript">
        $(function() {
            {% if _has_filters %}
            // HTML5 specifies that a <script> tag inserted with innerHTML should not execute
            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
            // That's why we can't use just 'innerHTML'. See https://stackoverflow.com/a/47614491/2804294
            var setInnerHTML = function(element, htmlContent) {
                element.innerHTML = htmlContent;
                Array.from(element.querySelectorAll('script')).forEach( oldScript => {
                    const newScript = document.createElement('script');
                    Array.from(oldScript.attributes)
                        .forEach(attr => newScript.setAttribute(attr.name, attr.value));
                    newScript.appendChild(document.createTextNode(oldScript.innerHTML));
                    oldScript.parentNode.replaceChild(newScript, oldScript);
                });
            };
            document.querySelector('.action-filters-button').addEventListener('click', function(event) {
                let filterButton = event.currentTarget;
                let filterModal = document.querySelector(filterButton.dataset.modal);
                let filterModalBody = filterModal.querySelector('.modal-body');
                $(filterModal).modal({ backdrop: true, keyboard: true });
                filterModalBody.innerHTML = '<div class="fa-3x px-3 py-3 text-muted text-center"><i class="fas fa-circle-notch fa-spin"></i></div>';
                $.get(filterButton.getAttribute('href'), function (response) {
                    setInnerHTML(filterModalBody, response);
                });
                event.preventDefault();
                event.stopPropagation();
            });
            {% endif %}
            {% if _has_batch_actions %}
            const titleContent = $('.content-header-title > .title').html();
            $(document).on('click', '.deselect-batch-button', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox-all').prop('checked', false).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox-all', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox').prop('checked', $(this).prop('checked')).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox', function () {
                const $content = $(this).closest('.content');
                let $input = $content.find(':hidden#batch_form_ids');
                let ids = $input.val() ? $input.val().split(',') : [];
                const id = $(this).val();
                if ($(this).prop('checked')) {
                    if (-1 === ids.indexOf(id)) {
                        ids.push(id);
                    }
                } else {
                    ids = ids.filter(function(value) { return value !== id });
                    $content.find(':checkbox.form-batch-checkbox-all').prop('checked', false);
                }
                if (0 === ids.length) {
                    $content.find('.global-actions').show();
                    $content.find('.batch-actions').hide();
                    $content.find('table').removeClass('table-batch');
                } else {
                    $content.find('.batch-actions').show();
                    $content.find('.global-actions').hide();
                    $content.find('table').addClass('table-batch');
                }
                $input.val(ids.join(','));
                $content.find('.content-header-title > .title').html(0 === ids.length ? titleContent : '');
            });
            $('button[name="batch_form[name]"].ask-confirm-batch-button').on('click', function (event) {
                event.preventDefault();
                event.stopPropagation();
                let $button = $(this);
                $('#modal-batch-action').modal({ backdrop : true, keyboard : true })
                    .off('click', '#modal-batch-action-button')
                    .on('click', '#modal-batch-action-button', function () {
                        $button.unbind('click');
                        $button.trigger('click');
                    });
            });
            {% endif %}
        });
    </script>

    {% if 'search' == app.request.get('action') %}
        <script type="text/javascript">
            const _search_query = "{{ app.request.get('query')|default('')|e('js') }}";
            // the original query is prepended to allow matching exact phrases in addition to single words
            $('#main').find('table tbody td:not(.actions)').highlight($.merge([_search_query], _search_query.split(' ')));
        </script>
    {% endif %}
    {# TOUCHED #}
    <script src="{{ asset('/assets/bootstrap-datatable/bootstrap-table.js') }}"></script>
    {% set _bs_locale = app.request.locale|default(app.request.defaultLocale) %}
    <script src="{{ asset('/assets/bootstrap-datatable/locale/bootstrap-table-'~ _bs_locale ~'.js') }}"></script>

    <script>
        $(document).ready(function() {
            let $table = $('#table');
            $table.bootstrapTable('destroy').bootstrapTable({
                height: 550,
                columns: [
                    {% for field in fields %}
                    {
                        title: '{{ field.label }}',
                        field: '{{ field.fieldName }}',
                        sortable: true,
                        formatter: function (data, row, index) {
                            let type = '{{ field.type }}';
                            if (type == 'boolean') {
                                let template = `<div class="checkbox-switch" data-propertyname="{{ field.property }}" data-id="${row.id}">
                                                    <label>
                                                        <input type="checkbox" ${ data == true ? 'checked' : '' }>
                                                        <span></span>
                                                    </label>
                                                </div>`;
                                return template;
                            } else if (type == 'association') {
                                 if (Array.isArray(data))
                                    return data.length;
                            } else if (type == 'datetime') {
                                if (data)

                                    return new Date(data).toLocaleString();
                            } else if (type == 'image') {
                                if (data == null) return `<span class="badge badge-warning">Vide</span>`;
                                let template = `<a href="#" class="easyadmin-thumbnail" data-featherlight="#easyadmin-lightbox-{{ field.fieldName }}${row.id}" data-featherlight-close-on-click="anywhere">
                                                    <img src="{{ field.base_path|default('') }}${data}">
                                                </a>
                                                <div id="easyadmin-lightbox-{{ field.fieldName }}${row.id}" class="easyadmin-lightbox">
                                                    <img src="{{ field.base_path|default('') }}${data}">
                                                </div>`;
                                return template;
                            } else if (type == 'text' || type == 'string') {
                                if (data)
                                    return data.length > 64 ? data.slice(0, 64)  + '...' : data;
                            }
                            
                            return data;
                        }
                    },
                    {% endfor %}
                    {% if _list_item_actions|length > 0 %}
                    {
                        title: "{{ 'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') }}",
                        formatter: function (data, row, index) {
                            let template = ``;
                            {% for action in _list_item_actions %}
                                {% if 'list' == action.name %}
                                    {% set action_href = _request_parameters.referer|default('') ? _request_parameters.referer|easyadmin_urldecode : path('easyadmin', _request_parameters|merge({ action: 'list' })) %}
                                {% elseif 'method' == action.type %}
                                    {% set action_href = path('easyadmin', _request_parameters|merge({ action: action.name, id: '__id__' })) %}
                                {% elseif 'route' == action.type %}
                                    {% set action_href = path(action.name, _request_parameters|merge({ action: action.name, id: '__id__' })) %}
                                {% endif %}
                            template += `<a
                                    class="{{ action.css_class|default('') }}"
                                    data-id="${row.id}"
                                    title="{{ action.title|default('') is empty ? "" : action.title|trans(_trans_params, _entity_config.translation_domain) }}"
                                    href="{{ action_href }}"
                                >
                                    {% if action.icon %}
                                        <i class="fa fa-fw fa-{{ action.icon }}"></i>
                                    {% endif %}
                                    {% if action.label is defined and not action.label is empty %}
                                        {{ action.label|trans(_trans_parameters) }}
                                    {% endif %}
                                </a>`;
                            {% endfor %}
                            template = template.replace(/__id__/g, row.id);
                            return template;
                        }
                    }
                    {% endif %}
                ],
                onPostBody: function (data) {
                    if (data.length == 0) return false;
                    const toggles = document.querySelectorAll('.checkbox-switch input[type="checkbox"]');
                    for (i = 0; i < toggles.length; i++) {
                        toggles[i].addEventListener('change', function () {
                            const toggle = this;
                            const newValue = this.checked;
                            const oldValue = !newValue;
                            const propertyName = this.closest('.checkbox-switch').dataset.propertyname;
                            const id = this.closest('.checkbox-switch').dataset.id;
                            const toggleUrl = "{{ path('easyadmin', { action: 'edit', entity: _entity_config.name, view: 'list' })|raw }}"
                                + "&id=" + id
                                + "&property=" + propertyName
                                + "&newValue=" + newValue.toString();
                            let toggleRequest = $.ajax({ type: "GET", url: toggleUrl, data: {} });
                            toggleRequest.done(function(result) {});
                            toggleRequest.fail(function() {
                                // in case of error, restore the original value and disable the toggle
                                toggle.checked = oldValue;
                                toggle.disabled = true;
                                toggle.closest('.checkbox-switch').classList.add('disabled');
                            });
                        });
                    }
                    $('.action-delete').on('click', function(e) {
                        e.preventDefault();
                        const id = e.target.dataset.id;
                        $('#modal-delete').modal({ backdrop: true, keyboard: true })
                            .off('click', '#modal-delete-button')
                            .on('click', '#modal-delete-button', function () {
                                let deleteForm = $('#delete-form');
                                deleteForm.attr('action', deleteForm.attr('action').replace('__id__', id));
                                deleteForm.trigger('submit');
                            });
                    });
                }
            })
        })
    </script>
{% endblock %}